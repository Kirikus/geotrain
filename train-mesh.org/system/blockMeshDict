/*--------------------------------*- C++ -*----------------------------------*\
| ========                |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.x                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
|*---------------------------------------------------------------------------*|
|  File created by CFD support s.r.o., Wed Sep  3 08:16:56 2014               |
|                    http://www.cdfsupport.com                                |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.3;
    format      ascii;
    class       dictionary;
    location    "constant/polyMesh";
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

TRAIN_W 5;
TRAIN_H 5;
TRAIN_L 63;

CENTER -0.8;
HEAD 15;
FLOOR -0.156;

TR_MIN_X #calc "$CENTER - $TRAIN_W/2";
TR_MAX_X #calc "$CENTER + $TRAIN_W/2";
TR_MIN_Y #calc "$HEAD - $TRAIN_L";
TR_MAX_Y #calc "$HEAD";
TR_MIN_Z #calc "$FLOOR";
TR_MAX_Z #calc "$FLOOR + $TRAIN_H";

TUNNEL_EXTRA_BETWEEN 0.2;
TUNNEL_EXTRA_SIDE 0.2;
TUNNEL_LENGTH 100;
TUNNEL_START 25;

TN_MIN_X #calc "$CENTER - $TRAIN_W/2 - $TRAIN_W*$TUNNEL_EXTRA_SIDE";
TN_MAX_X #calc "$CENTER + $TRAIN_W/2 + $TRAIN_W*(1 + $TUNNEL_EXTRA_SIDE + $TUNNEL_EXTRA_BETWEEN) ";
TN_MID_X #calc "($TN_MIN_X + $TN_MAX_X)/2";
TN_MIN_Y #calc "$TUNNEL_START";
TN_MAX_Y #calc "$TUNNEL_START + $TUNNEL_LENGTH";
TN_MIN_Z #calc "$FLOOR";
TN_MAX_Z #calc "$FLOOR + $TRAIN_H";
TN_DOME_Z #calc "$FLOOR + $TRAIN_H + ($TN_MAX_X - $TN_MIN_X)/2";

GAP_X 10;
GAP_Y 20;
GAP_Z 5;

SP_MIN_X #calc "$TN_MIN_X - $GAP_X";
SP_MAX_X #calc "$TN_MAX_X + $GAP_X";
SP_MIN_Y #calc "$TR_MIN_Y - $GAP_Y";
SP_MAX_Y #calc "$TN_MAX_Y + $GAP_Y + $TRAIN_L";
SP_MIN_Z #calc "$TN_MIN_Z";
SP_MAX_Z #calc "$TN_DOME_Z + $GAP_Z";

CELLS_X_TN 10;
CELLS_X_SP 5;
CELLS_Y_TN 100;
CELLS_Y_ST 100;
CELLS_Y_EN 80;
CELLS_Z_TN 7;
CELLS_Z_SP 5;
CELLS_Z #calc "$CELLS_Z_SP + $CELLS_Z_TN";

vertices
(
//START - 0
   ( $SP_MIN_X $SP_MIN_Y $SP_MIN_Z) //0 
   ( $SP_MAX_X $SP_MIN_Y $SP_MIN_Z) //1
   ( $SP_MAX_X $SP_MIN_Y $SP_MAX_Z) //2
   ( $SP_MIN_X $SP_MIN_Y $SP_MAX_Z) //3
   ( $TN_MIN_X $SP_MIN_Y $TN_MIN_Z) //4
   ( $TN_MAX_X $SP_MIN_Y $TN_MIN_Z) //5
   ( $TN_MAX_X $SP_MIN_Y $TN_MAX_Z) //6
   ( $TN_MIN_X $SP_MIN_Y $TN_MAX_Z) //7
   ( $TN_MIN_X $SP_MIN_Y $SP_MAX_Z) //8
   ( $TN_MAX_X $SP_MIN_Y $SP_MAX_Z) //9
//TUNNEL_ENTER - 1
   ( $SP_MIN_X $TN_MIN_Y $SP_MIN_Z) //0
   ( $SP_MAX_X $TN_MIN_Y $SP_MIN_Z) //1
   ( $SP_MAX_X $TN_MIN_Y $SP_MAX_Z) //2
   ( $SP_MIN_X $TN_MIN_Y $SP_MAX_Z) //3
   ( $TN_MIN_X $TN_MIN_Y $TN_MIN_Z) //4
   ( $TN_MAX_X $TN_MIN_Y $TN_MIN_Z) //5
   ( $TN_MAX_X $TN_MIN_Y $TN_MAX_Z) //6
   ( $TN_MIN_X $TN_MIN_Y $TN_MAX_Z) //7
   ( $TN_MIN_X $TN_MIN_Y $SP_MAX_Z) //8
   ( $TN_MAX_X $TN_MIN_Y $SP_MAX_Z) //9
//TUNNEL_EXIT - 2
   ( $SP_MIN_X $TN_MAX_Y $SP_MIN_Z) //0
   ( $SP_MAX_X $TN_MAX_Y $SP_MIN_Z) //1
   ( $SP_MAX_X $TN_MAX_Y $SP_MAX_Z) //2
   ( $SP_MIN_X $TN_MAX_Y $SP_MAX_Z) //3
   ( $TN_MIN_X $TN_MAX_Y $TN_MIN_Z) //4
   ( $TN_MAX_X $TN_MAX_Y $TN_MIN_Z) //5
   ( $TN_MAX_X $TN_MAX_Y $TN_MAX_Z) //6
   ( $TN_MIN_X $TN_MAX_Y $TN_MAX_Z) //7
   ( $TN_MIN_X $TN_MAX_Y $SP_MAX_Z) //8
   ( $TN_MAX_X $TN_MAX_Y $SP_MAX_Z) //9
//END - 3
   ( $SP_MIN_X $SP_MAX_Y $SP_MIN_Z) //0
   ( $SP_MAX_X $SP_MAX_Y $SP_MIN_Z) //1
   ( $SP_MAX_X $SP_MAX_Y $SP_MAX_Z) //2
   ( $SP_MIN_X $SP_MAX_Y $SP_MAX_Z) //3
   ( $TN_MIN_X $SP_MAX_Y $TN_MIN_Z) //4
   ( $TN_MAX_X $SP_MAX_Y $TN_MIN_Z) //5
   ( $TN_MAX_X $SP_MAX_Y $TN_MAX_Z) //6
   ( $TN_MIN_X $SP_MAX_Y $TN_MAX_Z) //7
   ( $TN_MIN_X $SP_MAX_Y $SP_MAX_Z) //8
   ( $TN_MAX_X $SP_MAX_Y $SP_MAX_Z) //9
//ADDITIONAL ON SIDES - 4
   ( $SP_MIN_X $SP_MIN_Y $TN_MAX_Z) //0
   ( $SP_MAX_X $SP_MIN_Y $TN_MAX_Z) //1
   ( $SP_MIN_X $TN_MIN_Y $TN_MAX_Z) //2
   ( $SP_MAX_X $TN_MIN_Y $TN_MAX_Z) //3
   ( $SP_MIN_X $TN_MAX_Y $TN_MAX_Z) //4
   ( $SP_MAX_X $TN_MAX_Y $TN_MAX_Z) //5
   ( $SP_MIN_X $SP_MAX_Y $TN_MAX_Z) //6
   ( $SP_MAX_X $SP_MAX_Y $TN_MAX_Z) //7

);

blocks
(
//TUNNEL
    hex ( 4  5 15 14  7  6 16 17) ($CELLS_X_TN $CELLS_Y_ST $CELLS_Z_TN) simpleGrading (1 1 1)
    hex (14 15 25 24 17 16 26 27) ($CELLS_X_TN $CELLS_Y_TN $CELLS_Z_TN) simpleGrading (1 1 1)
    hex (24 25 35 34 27 26 36 37) ($CELLS_X_TN $CELLS_Y_EN $CELLS_Z_TN) simpleGrading (1 1 1)
//TOP
    hex ( 7  6 16 17  8  9 19 18) ($CELLS_X_TN $CELLS_Y_ST $CELLS_Z_SP) simpleGrading (1 1 1)
//  hex (17 16 26 27 18 19 29 28) ($CELLS_X_TN $CELLS_Y_TN $CELLS_Z_SP) simpleGrading (1 1 1)
    hex (27 26 36 37 28 29 39 38) ($CELLS_X_TN $CELLS_Y_EN $CELLS_Z_SP) simpleGrading (1 1 1)
//LEFT
//  hex ( 0  4 14 10  3  8 18 13) ($CELLS_X_SP $CELLS_Y_ST $CELLS_Z) simpleGrading (1 1 1)
    hex ( 0  4 14 10 40  7 17 42) ($CELLS_X_SP $CELLS_Y_ST $CELLS_Z_TN) simpleGrading (1 1 1)
    hex (40  7 17 42  3  8 18 13) ($CELLS_X_SP $CELLS_Y_ST $CELLS_Z_SP) simpleGrading (1 1 1)
//  hex (10 14 24 20 13 18 28 23) ($CELLS_X_SP $CELLS_Y_TN $CELLS_Z) simpleGrading (1 1 1)
//  hex (20 24 34 30 23 28 38 33) ($CELLS_X_SP $CELLS_Y_EN $CELLS_Z) simpleGrading (1 1 1)
    hex (20 24 34 30 44 27 37 46) ($CELLS_X_SP $CELLS_Y_EN $CELLS_Z_TN) simpleGrading (1 1 1)
    hex (44 27 37 46 23 28 38 33) ($CELLS_X_SP $CELLS_Y_EN $CELLS_Z_SP) simpleGrading (1 1 1)
//RIGHT
//  hex ( 5  1 11 15  9  2 12 19) ($CELLS_X_SP $CELLS_Y_ST $CELLS_Z) simpleGrading (1 1 1)
    hex ( 5  1 11 15  6 41 43 16) ($CELLS_X_SP $CELLS_Y_ST $CELLS_Z_TN) simpleGrading (1 1 1)
    hex ( 6 41 43 16  9  2 12 19) ($CELLS_X_SP $CELLS_Y_ST $CELLS_Z_SP) simpleGrading (1 1 1)
//  hex (15 11 21 25 19 12 22 29) ($CELLS_X_SP $CELLS_Y_TN $CELLS_Z) simpleGrading (1 1 1)
//  hex (25 21 31 35 29 22 32 39) ($CELLS_X_SP $CELLS_Y_EN $CELLS_Z) simpleGrading (1 1 1)
    hex (25 21 31 35 26 45 47 36) ($CELLS_X_SP $CELLS_Y_EN $CELLS_Z_TN) simpleGrading (1 1 1)
    hex (26 45 47 36 29 22 32 39) ($CELLS_X_SP $CELLS_Y_EN $CELLS_Z_SP) simpleGrading (1 1 1)
);

edges
(
    arc  6  7 ($TN_MID_X $SP_MIN_Y $TN_DOME_Z)
    arc 16 17 ($TN_MID_X $TN_MIN_Y $TN_DOME_Z)
    arc 26 27 ($TN_MID_X $TN_MAX_Y $TN_DOME_Z)
    arc 36 37 ($TN_MID_X $SP_MAX_Y $TN_DOME_Z)
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
//          (33 38 34 30)
            (33 38 37 46)
            (46 37 34 30)
            (37 36 35 34)
            (38 39 36 37)
//          (39 32 31 35)
            (39 32 47 36)
            (36 47 31 35)
        );
    }
    outlet
    {
        type patch;
        faces
        (
//          ( 0  4  8  3)
            ( 0  4  7 40)
            (40  7  8  3)
            ( 4  5  6  7)
            ( 7  6  9  8)
//          ( 5  1  2  9)
            ( 5  1 41  6)
            ( 6 41  2  9)
        );
    }
    sides
    {
        type wall;
        faces
        (
//          ( 1 11 12  2)
            ( 1 11 43 41)
            (41 43 12  2)
//          (21 31 32 22)
            (21 31 47 45)
            (45 47 32 22)
//          (10  0  3 13)
            (10  0 40 42)
            (42 40  3 13)
//          (30 20 23 33)
            (30 20 44 46)
            (46 44 23 33)
            ( 3  8 18 13)
            ( 8  9 19 18)
            ( 9  2 12 19)
            (23 28 38 33)
            (28 29 39 38)
            (29 22 32 39)
        );
    }
    ground
    {
        type wall;
        faces
        (
            (10 14  4  0)
            (14 15  5  4)
            (15 11  1  5)
            (30 34 24 20)
            (34 35 25 24)
            (35 31 21 25)
        );
    }
    tunnel_ground
    {
        type wall;
        faces
        (
            (24 25 15 14)
        );
    }
    tunnel
    {
        type wall;
        faces
        (
            (16 15 25 26)
            (17 16 26 27)
            (27 24 14 17)
        );
    }
    mountain
    {
        type wall;
        faces
        (
//          (13 18 14 10)
            (13 18 17 42)
            (42 17 14 10)
//          (19 12 11 15)
            (19 12 43 16)
            (16 43 11 15)
            (18 19 16 17)
//          (20 24 28 23)
            (20 24 27 44)
            (44 27 28 23)
//          (25 21 22 29)
            (25 21 45 26)
            (26 45 22 29)
            (27 26 29 28)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
